import {ActionRowBuilder, ButtonBuilder, ButtonInteraction, ButtonStyle, EmbedBuilder, Events} from "discord.js";
import userRepository from "../database/repository/userRepository";
import memberGuildRepository from "../database/repository/memberGuildRepository";
import guildRepository from "../database/repository/guildRepository";

module.exports = {
    name: Events.InteractionCreate,
    async execute(interaction: ButtonInteraction) {
        try {
            if (!interaction.isButton()) return;
            const customIds = ['showUserSettings', 'showGuildSettings', 'setVisibleEmoji', 'setCustomEmoji', 'setPremium', 'allowDisableEmoji', 'addRoles'];
            const {customId} = interaction;
            if (!customIds.includes(customId)) return;
            if (interaction.user.id !== interaction.message.interaction?.user.id) return interaction.reply({content: '–ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤–∞–º–∏', ephemeral: true});
            if (!interaction.guild) return;
            if (!await memberGuildRepository.getMemberGuild(interaction.guild, interaction.user)) await memberGuildRepository.upsertMemberGuild(interaction.guild, interaction.user, new Date());
            if (customId === 'showUserSettings' || customId === 'setVisibleEmoji') {
                const userData = await userRepository.getById(interaction.user.id);
                const memberData = await memberGuildRepository.getMemberGuild(interaction.guild, interaction.user);
                const isPremium = userData?.premium;
                let isVisibleEmoji = memberData?.isVisibleEmoji;
                const premEmoji = userData?.premiumEmoji;

                if ( customId === 'setVisibleEmoji') {

                    const guildData = await guildRepository.getGuild(interaction.guild.id);
                    let allowDisableEmoji = guildData?.allowDisableEmoji;
                    if (!allowDisableEmoji && !isPremium) {
                        await memberGuildRepository.updateVisibleEmoji(interaction.user.id, interaction.guild.id, true);
                        await interaction.reply({content: '–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫—Ä—ã—Ç–∏—è —ç–º–æ–¥–∑–∏ –≤ –Ω–∏–∫–µ', ephemeral: true});
                    }
                    await memberGuildRepository.updateVisibleEmoji(interaction.user.id, interaction.guild.id, !isVisibleEmoji);
                    isVisibleEmoji = !isVisibleEmoji;
                }

                const embed = new EmbedBuilder()
                    .setTitle('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                    .setDescription('–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ –±–æ–ª—å—à–µ –∫—Ä—É—Ç—ã—Ö —Ñ–∏—á');

                const buttonVisibleEmoji = new ButtonBuilder()
                    .setLabel(`–í–∏–¥–∏–º–æ—Å—Ç—å —ç–º–æ–¥–∑–∏: ${isVisibleEmoji ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`)
                    .setCustomId('setVisibleEmoji')
                    .setEmoji('üëÄ')
                    .setStyle(ButtonStyle.Primary);

                const buttonCustomEmoji = new ButtonBuilder()
                    .setLabel('–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–º–æ–¥–∑–∏')
                    .setCustomId('setCustomEmoji')
                    .setEmoji('üëë')
                    .setStyle(ButtonStyle.Primary);

                const buttonPremium = new ButtonBuilder()
                    .setLabel(`–ü—Ä–µ–º–∏—É–º`)
                    .setCustomId('setPremium')
                    .setEmoji('üëë')
                    .setStyle(isPremium ? ButtonStyle.Success : ButtonStyle.Danger);

                const rowButtons = new ActionRowBuilder<ButtonBuilder>()
                    .addComponents(buttonVisibleEmoji, buttonPremium);

                const rowPremFeatures = new ActionRowBuilder<ButtonBuilder>()
                    .addComponents(buttonCustomEmoji);

                await interaction.update({embeds: [embed], components: [rowButtons, rowPremFeatures]});

            } else if (customId === 'showGuildSettings' || customId === 'allowDisableEmoji' || customId === 'addRoles') {

                const guildData = await guildRepository.getGuild(interaction.guild.id);
                const guildEmoji = guildData?.emoji;
                let allowDisableEmoji = guildData?.allowDisableEmoji;

                if (customId === 'allowDisableEmoji') {
                    await guildRepository.updateAllowDisableEmoji(interaction.guild.id, !allowDisableEmoji);
                    allowDisableEmoji = !allowDisableEmoji;
                }

                const embedGuildSettings = new EmbedBuilder()
                    .setTitle('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞')
                    .setDescription(`–≠–º–æ–¥–∑–∏ —Å–µ—Ä–≤–µ—Ä–∞: ${guildEmoji}\n`+
                        `1. –†–∞–∑—Ä–µ—à–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–∫–ª—é—á–∞—Ç—å —ç–º–æ–¥–∑–∏ –≤ –Ω–∏–∫–µ: ${allowDisableEmoji ? '–¥–∞' : '–Ω–µ—Ç'}`);

                const buttonAllowDisableEmoji = new ButtonBuilder()
                    .setLabel('1. '+(allowDisableEmoji ? '–û—Ç–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å'))
                    .setCustomId('allowDisableEmoji')
                    .setStyle(allowDisableEmoji ? ButtonStyle.Danger : ButtonStyle.Success);

                const buttonAddRoles = new ButtonBuilder()
                    .setLabel('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π')
                    .setCustomId('addRoles')
                    .setEmoji('üëë')
                    .setStyle(ButtonStyle.Primary);

                const rowButtons = new ActionRowBuilder<ButtonBuilder>()
                    .addComponents(buttonAllowDisableEmoji, buttonAddRoles );

                await interaction.update({embeds: [embedGuildSettings], components: [rowButtons]});


            }



        } catch (err) {
            console.error(err);
        }
    }
}